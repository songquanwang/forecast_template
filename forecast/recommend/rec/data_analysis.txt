
推荐模式：
transport_mode: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
[1, 2, 7, 9, 11] price 存在''
[3,5,6] price全是0
4 8 10 price不为''
transport_mode
1     393982
2     246624
3     567019  price=''
4     515934  price<> ''
5     158316  price=''
6     234134  price=''
7     281512
8     15668  price<> ''
9     160854
10    103237  price<> ''
11    29345

#######
price 为'' 的比例
transport_mode
1     0.004125
2     0.004752
3     0.000000
4     0.000000 *
5     0.000000
6     0.000000
7     0.021182
8     0.000000*
9     0.000068
10    0.000000 *
11    0.002147


添加
用户喜好特征：用户使用工具次数 最大、最少；距离分箱
添加推荐列表特征：

{Interval(-224.863, 22587.3, closed='right'),
 Interval(22587.3, 45173.6, closed='right'),
 Interval(45173.6, 67759.9, closed='right'),
 Interval(67759.9, 90346.2, closed='right'),
 Interval(90346.2, 112932.5, closed='right'),
 Interval(112932.5, 135518.8, closed='right'),
 Interval(135518.8, 158105.1, closed='right'),
 Interval(158105.1, 180691.4, closed='right'),
 Interval(180691.4, 203277.7, closed='right'),
 Interval(203277.7, 225864.0, closed='right')}

 pd.cut(ages, [0,5000,10000,15000,20000,250000,10000000]

 sorted(c, key=c.get)[-1]

 特征工程
 1.按地址聚类  添加 o20 ,d29,每个类别最大 label cat
               添加维度的直线距离  num_direct_distance

 2.按label 分组，计算：mode svd 向量
      每个计划各个类别向量的 距离 num     12中方式*7 ,不足7个用None
      每个label最大的
 3.按照用户分组，用户最喜欢的交通方式 cat
                 用户+天气 最喜欢的交通方式 cat
                 用户+价格 num
                 用户+距离 num
                 用户+时间 num
 4.

####################
[1, 2, 7, 9, 11] price 存在''
[3,5,6] price全是0
4 8 10 price不为''

1.价格低，距离和时间成正比 (公交)
    distance    9671.500000
    eta         3504.000000
    price        300.000000
    dj             0.032273
    sd             2.720400
2.价格低距离和时间比较短 (公交)
    distance    14158.000000
    eta          2833.000000
    price         500.000000
    dj              0.033622
    sd              5.033312
3.价格0   距离长，时间段  (自驾)
    distance    12802.000000
    eta          1811.000000
    price           0.000000
    dj              0.000000
    sd              6.948261
4.价格高，距离时间成正比（打车)
    distance    14349.000000
    eta          2151.500000
    price        4400.000000
    dj              0.318007
    sd              6.504455
5.0价格，距离短 4000米内，时间4000秒内 (步行)
    distance    1792.000000
    eta         1603.000000
    price          0.000000
    dj             0.000000
    sd             1.121212
6.0价格，距离短 10000米内，时间3000秒内 略快 (自行车)
    distance    3800.500000
    eta         1147.000000
    price          0.000000
    dj             0.000000
    sd             3.312303
7.价格略高(30-40),距离7500以内，时间略长 (地铁)
    distance    22619.000000
    eta          4598.000000
    price         700.000000
    dj              0.034208
    sd              4.847191
8.价格较高（40-140)，距离长，时间略短 快 （打车+步行)
    distance    24463.000000
    eta          4748.000000
    price        2400.000000
    dj              0.106034
    sd              5.222663
9.有的有价格(<25)，有的无;距离长，时间略短 (公交)
    distance    16730.000000
    eta          3073.000000
    price         500.000000
    dj              0.029211
    sd              5.440238
10.价格较低(<10),距离较长（10000-50000),时间<10000 (地铁)
    distance    23016.000000
    eta          3419.000000
    price        2100.000000
    dj              0.107647
    sd              6.738737
11.价格低，距离短（<6000),时间不短 （公交)
    distance    25063.000000
    eta          4933.000000
    price         700.000000
    dj              0.030078
    sd              5.013298
推荐次数多：0 3 4 7
推荐次数少：8 11
y=393982,246624,567019,515934,158316,234134,281512,15668,160854,103237,29345
x=list(range(1,12))


#50099 条推荐了两个类型相同的


1.重新加入没有plans 的数据 +没有点击的数据：完成
2.按组抽样 ：完成
3.写f1 score 函数：完成
3.加入新特征


1.按地址聚类：sid 维度
            添加 o20 ,d20,    cat
            是否在一个类别 same_cls20 cat
            添加维度的直线距离  num_direct_distance

            每个类别最大 label cat   *
            按类别： 价格、距离、时间、单价

2.添加天气标志：sid 维度
             0 1 晴天、下雨 cat is_rain  估计不好用


3.按照用户分组 pid 维度：
             用户最喜欢的交通方式 cat
             用户+天气 最喜欢的交通方式 cat

             用户+价格 ：最大 最小 平均 方差   4
             用户+距离 ：最大 最小 平均 方差   4
             用户+时间 ：最大 最小 平均 方差   4
             用户+dj ：最大 最小 平均 方差   4
             用户+sd ：最大 最小 平均 方差   4
             用户+sd_dj ：最大 最小 平均 方差   4
             用户每种方式的占比：12
4.一组计划的统计特征
    'max_dj', 'min_dj', 'mean_dj', 'std_dj',
    'max_sd', 'min_sd', 'mean_sd', 'std_sd',
    'max_sd_dj', 'min_sd_dj', 'mean_sd_dj', 'std_sd_dj'


5.离散化 距离 价格 时间

5.按label 分组，plans维度：
              distance price eta ：标准化
              平均值作为中心向量
              计算每个计划与各个中心向量的 距离
              12个距离+mean std max min =16个


expanded 解决分组问题后，结果更不准，小mode 变得更少，因为0.5的阈值太大了 0.66686971
2     33495
7     21181
1     14287
0     11278
5     10304
10     1272
9       565
3        83
11       62
6        25
4        10
8         9
Name: recommend_mode, dtype: int64
In [54]:


df['recommend_mode'].value_counts()


Out[54]:
2     33857
7     22354
1     18569
5     10899
10     3462
9      1748
11      417
3       381
0       342
6       292
8       214
4        36


1.没有计划的pid按照-1用户替换
2.没有推荐的用户，不能替换
3.距离小于100的， 3 4 5 6 dj用平均单价计算



用户 pid first_mode 次数 price distance  second_mode 次数 third_mode 次数
request 上一次点击 click_mode

1.diff 时间延迟分析：2880个延迟大于1秒的记录；分布情况略有差别
    data['plan_time']=pd.to_datetime(data['plan_time'])
    data['req_time']=pd.to_datetime(data['req_time'])
    data['time_diff_seconds']=data['time_diff'].apply(lambda x:x.seconds)

    # 2880个延迟大于1秒的记录；分布情况略有差别
    c1=data.click_mode.value_counts()
    c2=data[data['time_diff_seconds']>0].click_mode.value_counts()

    width=0.3
    x1, y1 = sort_count(c1)
    x2, y2 = sort_count(c2)
    y11 = y1 / sum(y1)
    y22 = y2 / sum(y2)

    plt.bar(x1 - width / 2, y11, width=0.3e
    plt.bar(x2 + width / 2, y22, width=0.3)
2.日期分析、小时分析
    两天click_mode 全是 0 共1593条
    ordered_data[ordered_data['plan_time_str'].isin(['2018-10-09','2018-11-05'])].click_mode.unique()
    err_sid_set =set(err_data.sid)

    s1=set(tr_queries.sid.unique())
    s2=set(tr_plans.sid.unique())
    s3=set(tr_click.sid.unique())

    set_no_click=s2-s3

    err_sid_set  属于set_no_click 也就是说：这两天，没有点击数据
    # 1513 个sid 整天点击都是 0
    data[data['sid'].isin(err_sid_list)].click_mode.unique()

mode0:
    m0: 整个期间平稳，平时占比在【6%,7%,8%】，10.4 10.15 有个二倍小高峰，'2018-10-09','2018-11-05' 异常高
mode1:
    特点： 价格低，距离和时间成正比 (公交)
    m1: 波动较大，平均占比14%，平时占比在【12-16】 呈上升趋势
mode2：
    特点： 价格低距离和时间比较短 (公交)
    m2: 波动较大，平均占比28%，平时占比在【23-33】 呈上升趋势
mode3：
    特点：价格0   距离长，时间段  (自驾)
    m3: 整体平稳，平均占比5%，平时占比在【4-6】    呈略下降趋势 10.6 10.7 10.29 11.14 高出 1%；11.24 最低4%
mode4：
    特点：价格高，距离时间成正比（打车)
    m4: 整体平稳，平均占比2.5%，
mode5：
    特点：价格，距离短 4000米内，时间4000秒内 (步行)
    m5: 整体平稳，平均占比9.6% ,平时占比在【8-11】     周末明显变多****
mode6：
    特点：价格，距离短 10000米内，时间3000秒内 略快 (自行车)
    m6: 整体平稳，平均占比 2.3% ,平时占比在【1.5-3%】  按月呈下降趋势(天气变冷的缘故)
mode7：
    特点：价格略高(3-4),距离7500以内，时间略长 (地铁)
    m7: 整体波动较大，平均占比 16% ,平时占比在【14-20%】  按月呈上升趋势(天气变冷的缘故)；周一最高，周日最低
mode8：
    特点：价格较高（40-140)，距离长，时间略短 快 （打车+步行)
    m8: 整体波动较大，平均占比 0.6% ,平时占比在【0.3-0.9%】  ;数据从2018-10-22开始（不全) ** 需要加大权重
mode9:
    特点：有的有价格(<25)，有的无;距离长，时间略短 (公交+打的)
    m9: 整体波动较大，平均占比 9.6% ,平时占比在【4-14%】
    异常值：10.15 10.22 11.3 11.13-11.16 11.21-11.23  11.26-11.30 低 4%
mode10:
    #价格较低(<10),距离较长（10000-50000),时间<10000 (地铁)
    m10:整体平稳，平均占比 3% ,平时占比在【2-4%】
mode11:
    #价格低，距离短（<6000),时间不短 （公交)
    m11:波动略大，平均占比 1.2% ,平时占比在【0.6-2%】，下降趋势

7 数据缺失，召回率高？？？

array([0.07681029, 0.14330196, 0.27795517, 0.05014927, 0.02567131,
       0.09668998, 0.02415824, 0.15926762, 0.00378166, 0.0995084 ,
       0.03030624, 0.01239986])

hour_mode?

3.预测结果分析
  0. 7618
      转移：1 2  5 7 9
      召回率：偏低
      [ 232, 1544, 1461,  419,  139,  953,  304, 1270,   17,  761,  338,180]
  3.  4892
      转移：1 2 5(有点) 7 9
      [   9, 1031,  720,  792,   88,  315,  137,  903,   14,  502,  228,153]

  4.  2431
      转移：1 2  7 9
      [  4, 684, 410, 153, 140,  51, 112, 457,   5, 246, 106,  63]
  6.  2339
      转移：1 2  5
      [  5, 630, 211,  55,  67, 516, 691,  79,   1,  76,   2,   6]
  8.  398
      转移：0 7 9 11 3
        0     2    3    4  7     8     9   11
      [ 99,  13,  34,   3, 100,  69,  39,  41]
  10. 2900
      转移： 7 2
      [   7,   69,  252,   28,    1,  500,  147, 1884,   12]


8 : 0 3

回家验证 plans_featuers.文件行数 546016 是不是少，有没有空
